# -*- coding: utf-8 -*-
# @Time : 2020/6/4 0:05
# @Author : Kevin
# @IDE: PyCharm
# @ModuleName : 0603New21Game
# @Description: 新21点游戏（动态规划）题号837

"""
她可以从牌面为[1,W]的牌中选择任意一张，这张牌是可以无限重复的，也就是说无论她取多少次，每次取到2（假如2在[1,W]范围内）的概率都是1/W;
如果她手上牌的总额小于K，她就会抽牌，大于等于K时，就停止抽牌;
停止抽牌后，她的牌面小于等于N时，她就获胜了，求她获胜的概率。
假设dp[x]为她手上牌面为x时，能获胜的概率，那么这个概率应该是：
dp[x]=1/w * (dp[x+1]+dp[x+2]+dp[x+3]...+dp[x+w])
因为抽取的牌面机会都是均等的，她能抽取的面值在[1,W]之间，所以将概率之和平均一下就是dp[x]的概率。
x最多能到K-1，因为当大于等于K时，爱丽丝会停止抽牌，所以当游戏结束时，即爱丽丝停止抽牌时，她可能达到的最大牌面是K+W-1，而一开始她的牌面是0，所以我们用一个长度为K+W的dp数组来保存她在所有面值下的胜率。
最后dp[0]，也就是最开始爱丽丝还没有抽牌，她的牌面为0时的胜率，这个就是我们的答案。

我将这个格子分成了2部分[0,K-1]和[K,K+W-1]，区别就是[0,K-1]爱丽丝可以抽牌，[K,K+W-1]时不能抽牌，那么不能抽牌时她获胜的概率是多少呢，很显然牌面小于等于N时，概率就是1，大于N概率就是0，所以先直接填满图中蓝色的格子。
接下来，从K-1开始填图中的橘色部分，这个值根据我们前面提到的计算方式，实际上就相当于它后面W个格子的总和除以W，
这时聪明的你一定会想到不用每轮都累加的方法吧，用一个s变量来保存累加结果，而下一轮只是减去右边的格子，加上左边的格子即可。
"""


def new21Game(N, K, W):
    dp = [None] * (K + W)
    s = 0
    for i in range(K, K + W):  # 填蓝色的格子
        dp[i] = 1 if i <= N else 0
        s += dp[i]
    for i in range(K - 1, -1, -1):  # 填橘黄色格子
        dp[i] = s / W
        s = s - dp[i + W] + dp[i]
    return dp[0]
